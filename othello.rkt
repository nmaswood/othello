#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 86 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 10 #"Monospace\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 66 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1           0 9308 0 28 3 18 #"#lang typed/racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 30 #"typed/test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"require/typed"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 23 3 8 #"#:opaque"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Image"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 11 #"empty-image"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 6 #"circle"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 12 #"beside/align"
0 0 24 3 2 #" ("
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 11 #"above/align"
0 0 24 3 2 #" ("
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";; DATA DEFINITIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; game players"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; board positions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #"]  "
0 0 17 3 35 #";; an integer on the interval [0,7]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #"]) "
0 0 17 3 35 #";; an integer on the interval [0,7]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; possible contents of a square on the board"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; game board"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 7 #"squares"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 4 #")]) "
0 0 17 3 22 #";; a list of length 64"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; game state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 5 #"board"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"next"
0 0 24 3 2 #"  "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; direction"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"Dir"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 2 #"dr"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 2 #"dc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; outcome of a game"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"Outcome"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tie"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; maybe type"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Maybe"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #") ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"Nothing"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Just"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 4 #"Just"
0 0 24 3 3 #" (["
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #"]) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";; CONSTANTS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; index offsets for the 8-neighborhood of a square"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"neighbor-offsets"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; width of the board in squares"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; number of squares on the board"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"num-cells"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; lower-bound on display width of a single cell"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"minimum-cell-wid"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";; UTILITY FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; return the other player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 3 #"] ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"same-player"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Cell"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; curried function for testing if a cell holds a player's piece"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"same-player"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 4 #"]) ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"player->string"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; return the name of the player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"player->string"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Black\""
0 0 24 3 3 #"] ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"White\""
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"is-empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; is a cell value 'none?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"on-board?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; is a position on the board?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"on-board?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #" [("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"pos->index"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; convert a position to an index (0..63)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pos->index"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #" [("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #") "
0 0 14 3 3 #"col"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"index->pos"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; convert an index to a position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"index->pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"Pos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"cells-update"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; functional update an element of a list of cells"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cells-update"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"match*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"hd"
0 0 24 3 2 #" ("
0 0 14 3 6 #"update"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 2 #"tl"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"cells-update"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"invalid index\""
0 0 24 3 5 #")]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"board-update"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; functional update of a board"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"board-update"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 3 #" [("
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-Board"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cells-update"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pos->index"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"cell-at"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; return the cell value at the given row and column"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cell-at"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 3 #" [("
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #") "
0 0 14 3 1 #"c"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; return the cell value at the given position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"board-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 3 #" [("
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pos->index"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"pos+"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; add two positions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pos+"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"match*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 5 #") [(("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"pr"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"dr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dc"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"make-Pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"pr"
0 0 24 3 1 #" "
0 0 14 3 2 #"dr"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"dc"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"count-pieces"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; count the pieces on the board belonging to the player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-pieces"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"sum"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"Board-squares"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; VISUALIZATION"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"build-row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; glue eight images left-to-right using the supplied function to cr"
 #"eate the"
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #";; images"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"build-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"mkImg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 4 #"]) ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"middle\""
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"empty-image"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 14 3 5 #"mkImg"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"build-col"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; glue eight imagestop-to-bottom using the supplied function to cre"
 #"ate the"
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #";; images"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"build-col"
0 0 24 3 1 #" "
0 0 14 3 5 #"mkImg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 4 #"]) ("
0 0 14 3 11 #"above/align"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"middle\""
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"empty-image"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 14 3 5 #"mkImg"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"game-image"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; render the game state as an image of the given width"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-image"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 14 3 9 #"total-wid"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 9 #"total-wid"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"font-sz"
0 0 24 3 2 #" ("
0 0 14 3 11 #"exact-floor"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"text2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"text2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 14 3 7 #"font-sz"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Black\""
0 0 24 3 3 #"))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 14 3 16 #"minimum-cell-wid"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"game-image"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"total width too small\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"above/align"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 19 3 6 #"\"left\""
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"draw-board"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 9 #"total-wid"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"text2"
0 0 24 3 2 #" ("
0 0 14 3 14 #"player->string"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"is next\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"text2"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Black's score:\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-pieces"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"text2"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"White's score:\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-pieces"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 9 #"))))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"board-image"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; render the board state as an image of the given width"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"board-image"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 9 #"total-wid"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 9 #"total-wid"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-wid"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 14 3 16 #"minimum-cell-wid"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"game-image"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"total width too small\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"draw-board"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"draw-board"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; helper function that actually draws a board given the width of a "
 #"square."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-board"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"empty-sq"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"darkgreen\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"black-sq"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #") "
0 0 14 3 8 #"empty-sq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"white-sq"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #") "
0 0 14 3 8 #"empty-sq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"font-sz"
0 0 24 3 2 #" ("
0 0 14 3 11 #"exact-floor"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"cell-wid"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"label-sq"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"label-sq"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 7 #"font-sz"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #") "
0 0 14 3 3 #"box"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"cell->image"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Cell"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cell->image"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 14 3 8 #"empty-sq"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #" "
0 0 14 3 8 #"black-sq"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 1 #" "
0 0 14 3 8 #"white-sq"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"mk-row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mk-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"build-row"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" [("
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #")] ("
0 0 14 3 11 #"cell->image"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cell-at"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 6 #")))))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"beside/align"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 8 #"\"bottom\""
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"build-col"
0 0 24 3 1 #" "
0 0 14 3 8 #"label-sq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"above/align"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"middle\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"build-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"label-sq"
0 0 24 3 3 #") ("
0 0 14 3 9 #"build-col"
0 0 24 3 1 #" "
0 0 14 3 6 #"mk-row"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";; GAME LOGIC"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; initial state of the game board"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-game"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 148
(
 #";; The game starts with black pieces at (row 3, col 4) and (row 4, c"
 #"ol 3), and white pieces at (row 3, col 3) and (row 4, col 4). Black "
 #"moves first."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-game"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 3 #"] ["
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"Game"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Board"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                  )) "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 53 #";; list of Pos that is recursively gone through later"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"flips"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; return a list of the squares that are flipped if the player place"
 #"s a piece"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; at the given position.  The result does _not_ include the played "
 #"piece."
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";; The empty list is returned if the move is not legal."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"flips"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Dir"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"try-flip-in-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #") "
0 0 14 3 5 #"cells"
0 0 24 3 3 #"))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"on-board?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 9 #"is-empty?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"board-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"foldl"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 16 #"neighbor-offsets"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 15 #"try-flip-in-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; given a board, player, starting position, and direction, try to f"
 #"lip pieces"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";; We assume that the initial pos is empty and on the board"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"try-flip-in-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pos+"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"is-other?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"same-player"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"try-flip"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 71
(
 #";; flip opponent's pieces in direction dir until we hit one of playe"
 #"r's"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 59
#";; pieces.  Return the empty list if we cannot flip legally"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"try-flip"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 9 #"on-board?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 9 #"is-other?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"board-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"try-flip"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pos+"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 9 #"is-empty?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"board-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 4 #"]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"try-flip"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"outflanks?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; return true if the player can leagally place a piece on the board"
 #" at"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";; the given location."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"outflanks?"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"try-flip-in-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 4 #")))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"on-board?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"is-empty?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"board-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"ormap"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 16 #"neighbor-offsets"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"board-apply-move"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; apply a move to board; signal an error if the move is not legal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"board-apply-move"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 5 #"flips"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"apply-move"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"illegal move\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"ps"
0 0 24 3 2 #" ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"apply-flip"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"apply-flip"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 3 #") ("
0 0 14 3 12 #"board-update"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 3 #"))}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"foldl"
0 0 24 3 1 #" "
0 0 14 3 10 #"apply-flip"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"apply-move"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; apply a move to a game state; signal an error if the move is not "
 #"legal"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"apply-move"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"Game"
0 0 24 3 2 #" ("
0 0 14 3 16 #"board-apply-move"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #") ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"apply-move"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"not your turn to move\""
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"move-possible?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; is it possible for the player to move on the given board?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Board-squares"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"search"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 65
#";; search the board squares looking for an empty square where the"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 62
#";; player can make a legal move (i.e., outflank the opponent)."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"search"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 9 #"num-cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 10 #"outflanks?"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 10 #"index->pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"search"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"search"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; is the game over?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 1 #" "
0 0 14 3 3 #"brd"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"test-game"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";; a test game"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 3 #"] ["
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"Game"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Board"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                  )) "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"game1"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #";; a test game"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 3 #"] ["
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"Game"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Board"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                  )) "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Outcome"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; determine the outcome of a game"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 8         367 4 2 #"(\0"
2 #")\0"
72 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"loc"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    {("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"brd"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"Game-board"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"g"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"white-score"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 12 #"count-pieces"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"brd"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 5 #"white"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"black-score"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 12 #"count-pieces"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"brd"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 5 #"black"
7 #"wxtext\0"
3 3 #"))}"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"      [("
7 #"wxtext\0"
3 1 #"<"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"white-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"black-score"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 5 #"black"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"      [("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"white-score"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"black-score"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 5 #"white"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"tie"
7 #"wxtext\0"
3 3 #"]))"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;PART B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;;;;;; FIRST-MOVE;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; This strategy selects the first outflanking position"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;; The board is scanned from right to left"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"first-move"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; This strategy selects the first outflanking position"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;; The board is scanned from left to right"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";;; If no moves available it generates phony position i.e. (Pos 10 1"
 #"0) which tells play-loop to skip turn"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-move"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"select-first"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #"  "
0 0 14 3 4 #"Game"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"select-first"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"games over\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"\\nno moves turn skipped\\n\""
0 0 24 3 2 #")("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 10 #"outflanks?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"select-first"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       )}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"select-first"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;;;;;;;; HUMAN;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"Int-Convert-List"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"48"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"49"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"51"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"52"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"53"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"54"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"55"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;;; This list allows for unparse to associate unicode values with i"
 #"ntegers"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"select"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 2 #" ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 14 3 13 #"Positive-Byte"
0 0 24 3 1 #" "
0 0 14 3 4 #"Zero"
0 0 24 3 3 #") ("
0 0 14 3 4 #"List"
0 0 24 3 1 #" "
0 0 14 3 13 #"Positive-Byte"
0 0 24 3 1 #" "
0 0 14 3 13 #"Positive-Byte"
0 0 24 3 4 #"))) "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; this function is the helper functions that ties Int-Convert-List "
 #"with unparse"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"select"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"input not matched\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"select"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    )) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"select"
0 0 24 3 1 #" "
0 0 14 3 16 #"Int-Convert-List"
0 0 24 3 1 #" "
0 0 21 3 2 #"48"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"parse-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; This function accepts a string of the form :"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;; \" ("
0 0 17 3 3 #"int"
0 0 17 3 7 #" from 0"
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 35 #") (int from 0 7)\" and returns a Pos"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; If the string is not of that form -> String input"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"parse-pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 5 #"))) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 4 #"Pos1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"Pos2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"char->integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 2 #"48"
0 0 24 3 1 #" "
0 0 14 3 4 #"Pos1"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 2 #"48"
0 0 24 3 1 #" "
0 0 14 3 4 #"Pos2"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 2 #"  "
0 0 14 3 4 #"Pos1"
0 0 24 3 1 #" "
0 0 21 3 2 #"55"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"Pos2"
0 0 24 3 1 #" "
0 0 21 3 2 #"55"
0 0 24 3 3 #")) "
0 0 14 3 3 #"str"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"Pos"
0 0 24 3 2 #" ("
0 0 14 3 6 #"select"
0 0 24 3 1 #" "
0 0 14 3 16 #"Int-Convert-List"
0 0 24 3 1 #" "
0 0 14 3 4 #"Pos1"
0 0 24 3 4 #" ) ("
0 0 14 3 6 #"select"
0 0 24 3 1 #" "
0 0 14 3 16 #"Int-Convert-List"
0 0 24 3 1 #" "
0 0 14 3 4 #"Pos2"
0 0 24 3 7 #" ))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"parse-pos"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"00\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"parse-pos"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"thanks_for_grading_my_work_all_quarter\\n\""
0 0 24 3 2 #") "
0 0 19 3 42 #"\"thanks_for_grading_my_work_all_quarter\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"human"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"human"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 51 #";; Will return the pos value corresponding to input"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 54 #";; Invalid input will result in loop until valid input"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 51 #";; helper functions created to placate type checker"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    { ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"is-it-str"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 3 #"EOF"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-it-str"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 5 #"\" :/\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 66
#";; Here if parse produces valid pos -> Input Pos else -> phony Pos"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"is-it-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-it-pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pos?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" [( "
0 0 14 3 5 #"input"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-it-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"parse-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-it-str"
0 0 24 3 2 #" ("
0 0 14 3 9 #"read-line"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"human"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 5 #"input"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;;;;;;;;;;;;;;;;;;; PLAY LOOP ;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"play-loop"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 3 #")) "
0 0 14 3 4 #"Game"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"play-loop"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 71
(
 #";; This function will play the two strategies until the end of the g"
 #"ame"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"implement-move"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 3 #")) "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 3 #")) "
0 0 14 3 4 #"Game"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 49 #";;; acc produces list of (Pair Player Pos) combos"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 120
(
 #";;;  m corresponds to faulty inputs; it ends the game at 3 false inp"
 #"uts and resets each time a proper move had been made"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"implement-move"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-image"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"\\nGame Over\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tie"
0 0 24 3 2 #" ("
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")) "
0 0 19 3 29 #"\"It's a tie! Everybody wins!\""
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"Congrats \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                [ ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 16 #"\\n turn skipped\""
0 0 24 3 2 #")("
0 0 14 3 14 #"implement-move"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                    "
 #"("
) 0 0 14 3 4 #"Game"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 12 #"other-player"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #") )) "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" [( "
0 0 14 3 3 #"Pla"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #")) ( "
0 0 14 3 3 #"Boa"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"output"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #")) ]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                     [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 16 #"game terminated\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                     [ ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"implement-move"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pla"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 3 #"Boa"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pla"
0 0 24 3 4 #" )) "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 17 3 25 #";; if player can't move  "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"outflanks?"
0 0 24 3 1 #" "
0 0 14 3 3 #"Boa"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pla"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 14 #"implement-move"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pla"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"apply-move"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pla"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pla"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"\\n"
0 0 19 3 1 #" "
0 0 19 3 7 #"INVALID"
0 0 19 3 1 #" "
0 0 19 3 4 #"MOVE"
0 0 19 3 3 #" \\n"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 14 #"implement-move"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 11 #")))]))])))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"implement-move"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 19 #"play-loop-forgetful"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tie"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; \""
0 0 17 3 70
(
 #"forgets\" the history of the game; good for quick and easy console p"
 #"lay"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"play-loop-forgetful"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 9 #"play-loop"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #"  "
0 0 14 3 7 #"history"
0 0 24 3 1 #" "
0 0 14 3 11 #"game-at-end"
0 0 24 3 3 #") ("
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 11 #"game-at-end"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;; IMMEDIATE;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"flips-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Board"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"  "
0 0 14 3 2 #"->"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; all flanked positions plus the position that flanked them"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; this is needed for calculating corner & edge flank values"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flips-v2"
0 0 24 3 1 #" "
0 0 14 3 5 #"board"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 5 #"flips"
0 0 24 3 1 #" "
0 0 14 3 5 #"board"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flips-v2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 9 #"test-game"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 9 #"test-game"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 13 #"Position-Calc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; assigns a numerical value to every piece depending on desirabili"
 #"ty"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Position-Calc"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" [( "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pos->index"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"63"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #"  "
0 0 21 3 2 #"56"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-col"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-col"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [ "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"Position-Calc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"most-flips"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"most-flips"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 76
(
 #";;; uses indexes to find Pos of flanks that give the maximum amount "
 #"of flips"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";;; then creates list of all positions that will be flipped  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 116
(
 #";;; this includes the piece that caused the flip i.e. (Listof (cons "
 #"piece that flipped them (Listof Flipped Pieces))"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 119
(
 #";;; if x and y flips equal amount of  same amount of pieces -> (list"
 #" (list x xflip1 xflip2....) (list y yflip1 yflip2))"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 2 #">F"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #"  "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 4 #"))  "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 77
(
 #";;; Gives the indexs of the all the flips that yield the max amount "
 #"of pieces"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 26 #";;; I keeps track of index"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 31 #";;; J keeps track of max length"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 33 #";;; K keeps track of index of max"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 2 #">F"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sort"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 2 #">F"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #")) "
0 0 14 3 1 #"j"
0 0 24 3 3 #") ("
0 0 14 3 2 #">F"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #")) "
0 0 14 3 1 #"j"
0 0 24 3 3 #") ("
0 0 14 3 2 #">F"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #">F"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"j"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 6 #"))]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 4 #"]) ("
0 0 14 3 8 #"flips-v2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 17 3 62
#";; Uses Pos's to create (Listof (Listof Flipped Pieces) step 3"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #"]) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 17 3 86
(
 #";; converts Indexes back to Pos's, it's round about but it's easier "
 #"to work in step 2 "
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #">F"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"flips"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 14 3 8 #"Pos-List"
0 0 24 3 7 #")))))) "
0 0 17 3 46 #";; Determines indexes of max flip Pos's step 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"most-flips"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-game"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 17 #"immediate-tactics"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"immediate-tactics"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 38 #";;; selects Pos that flips most pieces"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 56 #";;; if there is a tie in the amount of pieces flipped ->"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #";;; selects pos that grants most deseriable pieces"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";;; if tie in length and desirability chooses first arbitrarily"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" [( "
0 0 14 3 8 #"flip-pos"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 4 #"]) ("
0 0 14 3 8 #"flips-v2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 14 3 8 #"Pos-List"
0 0 24 3 5 #"))]  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"apply-pos-calc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 3 #")) "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"apply-pos-calc"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 45 #";; finds max pos calc and returns index of it"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 27 #";; i keeps track of the max"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 33 #";; j keeps track of current index"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 27 #";; k keeps track of the Pos"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           [ ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #"))) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 4 #"turn"
0 0 19 3 1 #" "
0 0 19 3 8 #"skipped\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 14 #"apply-pos-calc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"Position-Calc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"           [ ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"Position-Calc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 14 #"apply-pos-calc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"Position-Calc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"apply-pos-calc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #") "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 5 #")]))}"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"apply-pos-calc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"most-flips"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;;;; Game Heuristics;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"piece-counting"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; determines if the game state"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; has more black pieces or white pieces or niether"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"piece-counting"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 3 #"blx"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 4 #"]) ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"Board-squares"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"ws"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 4 #"]) ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"Board-squares"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"blx"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"ws"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"Pos-Cal-Var"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; assigns a numerical value to every piece depending on desirabili"
 #"ty"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;; the value of edges and corners and inners are all variable"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; n is edges  m is corneres and i is the rest"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Pos-Cal-Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" [( "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pos->index"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"63"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #"  "
0 0 21 3 2 #"56"
0 0 24 3 3 #")) "
0 0 14 3 1 #"m"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-col"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-col"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Pos-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 3 #")) "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [ "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 4 #"]) ("
0 0 14 3 11 #"Pos-Cal-Var"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"  "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"E&C"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"  "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; this is polymorphic is the basis for prefer-edges"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; and prefer-edges-and-corners"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; depending on which one you want you simply"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; plug in the same value for edges and corners or different values"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 3 #"E&C"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    {( "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #"  "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Board-squares"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")) "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 8 #"))])]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"prefer-edges"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; N corresponds the value of edges"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 12 #"prefer-edges"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"E&C"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"Pos-Cal-Var"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 24 #"prefer-edges-and-corners"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; N correspondes to the value of edges and M to corners"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 24 #"prefer-edges-and-corners"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"E&C"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"Pos-Cal-Var"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Hal-2000"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; tries to get fewer inner pieces in the beginning"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 8 #"Hal-2000"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" [( "
0 0 14 3 5 #"nones"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 24 3 4 #"]) ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"Board-squares"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"nones"
0 0 24 3 5 #")) (("
0 0 14 3 3 #"E&C"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #") "
0 0 14 3 11 #"Pos-Cal-Var"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 4 #") (("
0 0 14 3 3 #"E&C"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 11 #"Pos-Cal-Var"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;;;;;;;;;;;;;;;;;;;;;;;; Extra     ;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;; just for fun really"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"Pos-Cal-Var*"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;; every single value on the board recieves a unique variable valu"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Pos-Cal-Var*"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" [( "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pos->index"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"E&C*"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 4 #"E&C*"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 78
(
 #";;;; like its other versions except accepts a list corresponding to "
 #"each piece"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    {( "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #"  "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Board-squares"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"white"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tally"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 3 #")) "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 8 #"))])]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"tally"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"piece"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;; Heurisitc function that defines a value for every single piece o"
 #"n the board"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 5 #"piece"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 4 #"E&C*"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 12 #"Pos-Cal-Var*"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"data-collect"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #"  "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"data-collect"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #";; survival of the fittest"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 52 #";; pits randomly generated lists against one another"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #";; ran it , it took like four hours"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 83
(
 #";; then I found out my minimax/montymax was broken  and I had to red"
 #"o everything :/"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 4 #" { ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #")  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ([ "
0 0 14 3 11 #"random-list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #"]) ("
0 0 14 3 11 #"exact-floor"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 8 #"))))))])"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 2 #") "
0 0 14 3 2 #"L1"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 19 #"play-loop-forgetful"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #" ("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 5 #"piece"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 5 #"piece"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 21 3 1 #"'"
0 0 14 3 3 #"tie"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 4 #")) ]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 8 #"))]))))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #"]) ("
0 0 14 3 11 #"exact-floor"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 8 #")))))) ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #"]) ("
0 0 14 3 11 #"exact-floor"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 8 #"))))))  "
0 0 21 3 1 #"0"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"piece"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 8         972 4 2 #"(\0"
2 #")\0"
193 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"2"
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"58"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"99"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"74"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"63"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"78"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"45"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"81"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"47"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"80"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"35"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"38"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"30"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"67"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"53"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"66"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"24"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"58"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"98"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"65"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"4"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"94"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"68"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"97"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"42"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"81"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"78"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"77"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"78"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"89"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"68"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"4"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"86"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"80"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"47"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"22"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"36"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"17"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"34"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"72"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"92"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"76"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"44"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"96"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"2"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"93"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"72"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"34"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"80"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"69"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"10"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"65"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"23"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"41"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"68"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"61"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"17"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"72"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"97"
7 #"wxtext\0"
3 1 #")"
0 0 24 3 2 #") "
0 0 17 3 47 #";; Huerestic created by survival of the fittest"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 24 #"The-Mysterious-Heuristic"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;; randomly selects moves"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"The-Mysterious-Heuristic"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #") "
0 0 21 3 2 #".5"
0 0 24 3 3 #") ("
0 0 14 3 13 #"exact-ceiling"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 7 #" )))) ("
0 0 14 3 13 #"exact-ceiling"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 3 #" ( "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 5 #"-1000"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 7 #" ))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 23 #"The-Mysterious-Strategy"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"The-Mysterious-Strategy"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #".9"
0 0 24 3 3 #") ("
0 0 14 3 10 #"first-move"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #".8"
0 0 24 3 3 #") ("
0 0 14 3 17 #"immediate-tactics"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #".7"
0 0 24 3 4 #") (("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 5 #"piece"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 8         972 4 2 #"(\0"
2 #")\0"
193 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"2"
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"58"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"99"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"74"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"63"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"78"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"45"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"81"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"47"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"80"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"35"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"38"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"30"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"67"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"53"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"66"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"24"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"58"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"98"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"65"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"26"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"4"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"94"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"68"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"97"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"42"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"81"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"78"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"77"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"78"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"89"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"68"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"4"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"86"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"80"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"47"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"22"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"36"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"17"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"34"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"72"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"92"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"76"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"44"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"96"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"2"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"93"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"72"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"34"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"80"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"69"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"10"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"65"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"23"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"41"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"68"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"61"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"17"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"72"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 2 #"97"
7 #"wxtext\0"
3 1 #")"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #".6"
0 0 24 3 4 #") (("
0 0 14 3 7 #"minimax"
0 0 24 3 1 #" "
0 0 14 3 24 #"The-Mysterious-Heuristic"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #".5"
0 0 24 3 4 #") (("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 24 #"prefer-edges-and-corners"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #".4"
0 0 24 3 4 #") (("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 24 #"prefer-edges-and-corners"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      [ ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #".3"
0 0 24 3 4 #") (("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Hal-2000"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [ "
0 0 14 3 4 #"else"
0 0 24 3 3 #" (("
0 0 14 3 7 #"minimax"
0 0 24 3 1 #" "
0 0 14 3 24 #"The-Mysterious-Heuristic"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";       "
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;;; MINIMAX;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; This function finds and selects all playable positions of a game"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    {( "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"pos-moves"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pos-moves"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 10 #"outflanks?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"pos-moves"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pos-moves"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 5 #")]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pos-moves"
0 0 24 3 1 #" "
0 0 14 3 8 #"Pos-List"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-game"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; this function uses all playable positions of a game"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";; this function then finds all the game states corresponding to sel"
 #"ecting those positions"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pos"
0 0 24 3 4 #"]) ("
0 0 14 3 10 #"apply-move"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; tested visually "
0 0 17 3 4 #"(map"
0 0 17 3 8 #" (lambda"
0 0 17 3 4 #" [( "
0 0 17 3 1 #"G"
0 0 17 3 1 #" "
0 0 17 3 6 #": Game"
0 0 17 3 4 #")] ("
0 0 17 3 11 #"game-image "
0 0 17 3 1 #"G"
0 0 17 3 1 #" "
0 0 17 3 3 #"180"
0 0 17 3 4 #")) ("
0 0 17 3 21 #"gen-g-list new-game))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;;  this is a polymorphic function that finds the index of either t"
 #"he max"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";;; or min of a list of integers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    {( "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #"  "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 21 #";; i is current index"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 17 #";; j is max value"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 23 #";; k is max value index"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #") ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 14 3 1 #"i"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 14 3 1 #"i"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 5 #")]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"0"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"( "
0 0 21 3 2 #"43"
0 0 24 3 1 #" "
0 0 21 3 3 #"897"
0 0 24 3 1 #" "
0 0 21 3 3 #"897"
0 0 24 3 1 #" "
0 0 21 3 11 #"49871289347"
0 0 24 3 1 #" "
0 0 21 3 3 #"987"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"( "
0 0 21 3 2 #"43"
0 0 24 3 1 #" "
0 0 21 3 3 #"897"
0 0 24 3 1 #" "
0 0 21 3 3 #"897"
0 0 24 3 1 #" "
0 0 21 3 11 #"49871289347"
0 0 24 3 1 #" "
0 0 21 3 3 #"987"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc1"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc2"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 97
(
 #";;basically it takes a list of games and seperates the completed gam"
 #"es from the uncompleted games"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc1"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 4 #"acc1"
0 0 24 3 2 #") "
0 0 14 3 4 #"acc2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 4 #"acc2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"list-game-states"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; finds all possible games states up to a specificied number of mov"
 #"es"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"list-game-states"
0 0 24 3 1 #" "
0 0 14 3 2 #"gs"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #") ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [  "
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #"  "
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 2 #"g*"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 2 #"g*"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 5 #"trial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")  "
0 0 14 3 5 #"trial"
0 0 24 3 6 #"))]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 2 #"gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"game-states-evaluated"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";; finds all game states evaluates them according to a heuristic and"
 #" puts them in a list"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"game-states-evaluated"
0 0 24 3 1 #" "
0 0 14 3 2 #"gs"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")) "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #") ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" [( "
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 5 #" )] ("
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [  "
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #"  "
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 2 #"g*"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 2 #"g*"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 6 #"))]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 2 #"gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"complete"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";;;  completes game-state-evaluated-list by adding on the first term"
 #"  and reverse the rest of list"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"complete"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" [( "
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 5 #" )] ("
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 21 #"game-states-evaluated"
0 0 24 3 2 #" ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"minimax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 2 #"  "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"  "
0 0 14 3 4 #"Game"
0 0 24 3 2 #"  "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 122
(
 #";;;consumes the ply (the number of moves to look ahead) and a game, "
 #"and assigns a score using the given heuristic function"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";;; Takes either the max or minimum of list of a play depending on w"
 #"hether one is black or white"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"minimax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"congrats   \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"123456"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" {"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")) "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 2 #"  "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                      [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 3 #") ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                      ))} ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 8 #"complete"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"minimax"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; uses minimax-eval to find most desirable position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 7 #"minimax"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"game over\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 12 #"minimax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 21 3 6 #"123456"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"move skipped\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #"))) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"move skipped\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ([ "
0 0 14 3 4 #"vals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 4 #"]) ("
0 0 14 3 12 #"minimax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 5 #"))  ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"pick-upto"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"All"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; pics up to n items out of a list at random"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pick-upto"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"    { ( "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"All"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 19 #";;;; m is a counter"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 51 #";;;; acc is list  that will be eventually by output"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 58
#";;;; l is intial list that is continually becoming smaller"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ([ "
0 0 14 3 5 #"index"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"exact-floor"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"random"
0 0 24 3 7 #")))) ])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"            [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"            [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [ "
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"            )))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 9 #"pick-upto"
0 0 17 3 1 #" "
0 0 17 3 8 #"3 (list "
0 0 17 3 2 #"1 "
0 0 17 3 2 #"2 "
0 0 17 3 23 #"3 4 5 6 7)) -> '(3 5 4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 21 #"game-state-list-monty"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 2 #") "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; exact same as similar function utilized for minimax eval"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; except its branches are pruned by pick-up-to"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"game-state-list-monty"
0 0 24 3 1 #" "
0 0 14 3 2 #"gs"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")) "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #") ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pick-upto"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")  "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" [( "
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 5 #" )] ("
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         [  "
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #"  "
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"inner"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"pick-upto"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 2 #"g*"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"game-over-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 2 #"g*"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pick-upto"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"g*"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 2 #") "
0 0 14 3 8 #"int-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"trial"
0 0 24 3 6 #"))]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 2 #"gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"complete*"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 2 #"  "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; same as other complete only know with montymax limitations"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"complete*"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" [( "
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 5 #" )] ("
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 21 #"game-state-list-monty"
0 0 24 3 2 #" ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 13 #"montymax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; same are minimax-eval just with pruned branches"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"montymax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 1 #" "
0 0 14 3 6 #"branch"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"congrats   \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"move-possible?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Game-board"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"123456"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" {"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")) "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"Player"
0 0 24 3 2 #"  "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                       [ ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 3 #") ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"other-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                       ))} ("
0 0 14 3 5 #"inner"
0 0 24 3 2 #" ("
0 0 14 3 9 #"complete*"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 6 #"branch"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"montymax"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"Heuristic"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 8 #"Strategy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; same as minimax just prunes branches to as small as needed"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #" (("
0 0 14 3 8 #"montymax"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 1 #" "
0 0 14 3 6 #"branch"
0 0 24 3 2 #") "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [ ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 13 #"montymax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 1 #" "
0 0 14 3 6 #"branch"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 21 3 6 #"123456"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"move skipped\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"Pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ([ "
0 0 14 3 4 #"vals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Game"
0 0 24 3 4 #"]) ("
0 0 14 3 13 #"montymax-eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 3 #"ply"
0 0 24 3 1 #" "
0 0 14 3 6 #"branch"
0 0 24 3 1 #" "
0 0 14 3 1 #"G"
0 0 24 3 5 #"))  ("
0 0 14 3 10 #"gen-g-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Game-next"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"possible-moves"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 9 #"max/min-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0           0
